name: Build and Release

on:
  push:
    branches: [ '**' ]  # Run on all branches
    tags: [ 'v*' ]
  pull_request:
    branches: [ '**' ]  # Run on all branches
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: false
        default: false
        type: boolean
      target_branch:
        description: 'Target branch for release (default: current)'
        required: false
        default: ''
        type: string

env:
  DOTNET_VERSION: '6.0.x'

jobs:
  detect-version:
    runs-on: ubuntu-latest
    outputs:
      macos-version: ${{ steps.get-version.outputs.macos-version }}
      windows-version: ${{ steps.get-version.outputs.windows-version }}
      release-tag: ${{ steps.get-version.outputs.release-tag }}
      is-release-branch: ${{ steps.get-version.outputs.is-release-branch }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Extract version numbers
      id: get-version
      run: |
        # Extract macOS version from FPVMacsideCore.csproj
        MACOS_VERSION=$(grep -o '<Version>[^<]*</Version>' FPVMacSideCore/FPVMacsideCore.csproj | sed 's/<Version>\(.*\)<\/Version>/\1/')
        echo "macos-version=$MACOS_VERSION" >> $GITHUB_OUTPUT
        
        # Extract Windows version from FPVTracksideCore.csproj
        WINDOWS_VERSION=$(grep -o '<Version>[^<]*</Version>' FPVTracksideCore/FPVTracksideCore.csproj | sed 's/<Version>\(.*\)<\/Version>/\1/')
        echo "windows-version=$WINDOWS_VERSION" >> $GITHUB_OUTPUT
        
        # Check if this is a release branch (master, main, or release/*)
        if [[ "${{ github.ref_name }}" == "master" || "${{ github.ref_name }}" == "main" || "${{ github.ref_name }}" =~ ^release/ ]]; then
          IS_RELEASE_BRANCH="true"
        else
          IS_RELEASE_BRANCH="false"
        fi
        echo "is-release-branch=$IS_RELEASE_BRANCH" >> $GITHUB_OUTPUT
        
        # Use the higher version for release tag, or current timestamp if triggered manually
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          RELEASE_TAG="v$(date +'%Y.%m.%d-%H%M%S')"
        elif [[ "${{ github.ref_type }}" == "tag" ]]; then
          RELEASE_TAG="${{ github.ref_name }}"
        else
          # Use semantic versioning - pick the higher version
          if printf '%s\n%s\n' "$MACOS_VERSION" "$WINDOWS_VERSION" | sort -V | tail -n1 | grep -q "$WINDOWS_VERSION"; then
            RELEASE_TAG="v$WINDOWS_VERSION"
          else
            RELEASE_TAG="v$MACOS_VERSION"
          fi
        fi
        echo "release-tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
        
        echo "üçé macOS Version: $MACOS_VERSION"
        echo "ü™ü Windows Version: $WINDOWS_VERSION"
        echo "üè∑Ô∏è Release Tag: $RELEASE_TAG"
        echo "üì¶ Is Release Branch: $IS_RELEASE_BRANCH"

  build-macos:
    runs-on: macos-latest
    needs: detect-version
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore "FPVMacside - Core.sln" --verbosity minimal
    
    - name: Build macOS Release
      run: |
        dotnet publish FPVMacSideCore/FPVMacsideCore.csproj \
          --configuration Release \
          --runtime osx-arm64 \
          --self-contained true \
          --output "./build/macos-arm64" \
          -p:PublishSingleFile=false \
          -p:PublishReadyToRun=false \
          -p:TieredCompilation=false
    
    - name: Create macOS App Bundle
      run: |
        mkdir -p "FPVTrackside.app/Contents/MacOS"
        mkdir -p "FPVTrackside.app/Contents/Resources"
        
        # Copy ALL files from the build directory to MacOS
        cp -r "./build/macos-arm64/"* "FPVTrackside.app/Contents/MacOS/"
        
        # Copy app icon if it exists
        if [ -f "./build/macos-arm64/AppIcon.icns" ]; then
          cp "./build/macos-arm64/AppIcon.icns" "FPVTrackside.app/Contents/Resources/"
        elif [ -f "FPVMacSideCore/AppIcon.icns" ]; then
          cp "FPVMacSideCore/AppIcon.icns" "FPVTrackside.app/Contents/Resources/"
        fi
        
        # Ensure the icon file exists and has correct permissions
        if [ -f "FPVTrackside.app/Contents/Resources/AppIcon.icns" ]; then
          chmod 644 "FPVTrackside.app/Contents/Resources/AppIcon.icns"
          echo "‚úÖ AppIcon.icns copied successfully"
        else
          echo "‚ö†Ô∏è Warning: Icon file not found, app will use default icon"
        fi
        
        # Create Info.plist
        cat > "FPVTrackside.app/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleDisplayName</key>
            <string>FPVTrackside</string>
            <key>CFBundleExecutable</key>
            <string>FPVMacsideCore</string>
            <key>CFBundleIconFile</key>
            <string>AppIcon</string>
            <key>CFBundleIdentifier</key>
            <string>com.fpvtrackside</string>
            <key>CFBundleName</key>
            <string>FPVTrackside</string>
            <key>CFBundleShortVersionString</key>
            <string>${{ needs.detect-version.outputs.macos-version }}</string>
            <key>CFBundleVersion</key>
            <string>${{ needs.detect-version.outputs.macos-version }}</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.15</string>
            <key>LSApplicationCategoryType</key>
            <string>public.app-category.games</string>
            <key>NSHighResolutionCapable</key>
            <true/>
            <key>LSUIElement</key>
            <false/>
        </dict>
        </plist>
        EOF
        
        # Make executable
        chmod +x "FPVTrackside.app/Contents/MacOS/FPVMacsideCore"
        
        # Verify app bundle structure
        echo "üìÅ App Bundle Structure:"
        ls -la "FPVTrackside.app/Contents/"
        echo "üìÅ Resources Directory:"
        ls -la "FPVTrackside.app/Contents/Resources/" || echo "Resources directory is empty"
        echo "üìÅ MacOS Directory (first 10 files):"
        ls -la "FPVTrackside.app/Contents/MacOS/" | head -10
    
    - name: Create macOS DMG
      if: needs.detect-version.outputs.is-release-branch == 'true'
      run: |
        # Install create-dmg tool for professional DMG creation
        brew install create-dmg
        
        # Create a temporary directory for DMG contents
        mkdir -p dmg-temp
        cp -r "FPVTrackside.app" dmg-temp/
        
        # Create DMG with professional layout
        create-dmg \
          --volname "FPVTrackside v${{ needs.detect-version.outputs.macos-version }}" \
          --volicon "FPVTrackside.app/Contents/Resources/AppIcon.icns" \
          --window-pos 200 120 \
          --window-size 800 450 \
          --icon-size 100 \
          --icon "FPVTrackside.app" 200 190 \
          --hide-extension "FPVTrackside.app" \
          --app-drop-link 600 190 \
          --hdiutil-verbose \
          "FPVTrackside-macOS-v${{ needs.detect-version.outputs.macos-version }}.dmg" \
          dmg-temp/ || {
            # Fallback if create-dmg fails - use hdiutil directly
            echo "create-dmg failed, using hdiutil fallback..."
            hdiutil create -volname "FPVTrackside v${{ needs.detect-version.outputs.macos-version }}" \
              -srcfolder dmg-temp \
              -ov -format UDZO \
              "FPVTrackside-macOS-v${{ needs.detect-version.outputs.macos-version }}.dmg"
          }
        
        # Verify DMG was created
        ls -la *.dmg
    

    
    - name: Upload macOS Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: fpvtrackside-macos-${{ needs.detect-version.outputs.macos-version }}-${{ github.ref_name }}
        path: |
          FPVTrackside-macOS-*.dmg
        retention-days: 90

  build-windows:
    runs-on: windows-latest
    needs: detect-version
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Install WiX Toolset
      run: |
        # Download and install WiX Toolset v3.11.2
        $wixUrl = "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311.exe"
        $wixInstaller = "wix311.exe"
        Invoke-WebRequest -Uri $wixUrl -OutFile $wixInstaller
        Start-Process -FilePath $wixInstaller -ArgumentList "/quiet" -Wait
        Remove-Item $wixInstaller
        
        # Add WiX to PATH
        $env:PATH += ";C:\Program Files (x86)\WiX Toolset v3.11\bin"
        echo "WiX Toolset installed successfully"
    
    - name: Restore dependencies
      run: dotnet restore FPVTracksideCore/FPVTracksideCore.sln
    
    - name: Build Windows Release
      run: |
        dotnet publish FPVTracksideCore/FPVTracksideCore.csproj `
          --configuration Release `
          --runtime win-x64 `
          --self-contained true `
          --output "./build/windows-x64" `
          -p:PublishSingleFile=false `
          -p:PublishReadyToRun=false `
          -p:TieredCompilation=false
        
        # List what was published for debugging
        echo "Files published to build directory:"
        Get-ChildItem "build\windows-x64" -Recurse | ForEach-Object {
          $relativePath = $_.FullName -replace [regex]::Escape((Get-Location).Path + "\build\windows-x64\"), ""
          echo "  $relativePath"
        }
        
        # Copy ALL files from the project directory to build directory
        echo "Copying ALL project files to build directory..."
        
        # Get all files and folders from the project directory
        Get-ChildItem "FPVTracksideCore" -Recurse | Where-Object { !$_.PSIsContainer } | ForEach-Object {
          $relativePath = $_.FullName -replace [regex]::Escape((Get-Location).Path + "\FPVTracksideCore\"), ""
          $targetPath = "build\windows-x64\$relativePath"
          $targetDir = Split-Path $targetPath -Parent
          
          # Create target directory if it doesn't exist
          if (!(Test-Path $targetDir)) {
            New-Item -ItemType Directory -Path $targetDir -Force | Out-Null
          }
          
          # Copy the file
          Copy-Item $_.FullName $targetPath -Force
        }
        
        echo "Copied all project files to build directory"
        
        echo "Final build directory contents:"
        Get-ChildItem "build\windows-x64" -Recurse | ForEach-Object {
          $relativePath = $_.FullName -replace [regex]::Escape((Get-Location).Path + "\build\windows-x64\"), ""
          echo "  $relativePath"
        }
    
    - name: Create WiX Installer Files
      run: |
        # Create WiX source file for MSI
        echo '<?xml version="1.0" encoding="UTF-8"?>' > FPVTracksideCore.wxs
        echo '<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">' >> FPVTracksideCore.wxs
        echo '  <Product Id="*" Name="FPVTrackside" Language="1033" Version="${{ needs.detect-version.outputs.windows-version }}" Manufacturer="FPV Trackside" UpgradeCode="{12345678-1234-1234-1234-123456789012}">' >> FPVTracksideCore.wxs
        echo '    <Package InstallerVersion="200" Compressed="yes" InstallScope="perMachine" />' >> FPVTracksideCore.wxs
        echo '    <MajorUpgrade DowngradeErrorMessage="A newer version of [ProductName] is already installed." />' >> FPVTracksideCore.wxs
        echo '    <MediaTemplate EmbedCab="yes" />' >> FPVTracksideCore.wxs
        echo '    <Feature Id="ProductFeature" Title="FPVTrackside" Level="1">' >> FPVTracksideCore.wxs
        echo '      <ComponentGroupRef Id="ProductComponents" />' >> FPVTracksideCore.wxs
        echo '      <ComponentGroupRef Id="Shortcuts" />' >> FPVTracksideCore.wxs
        echo '    </Feature>' >> FPVTracksideCore.wxs
        echo '    <UIRef Id="WixUI_Minimal" />' >> FPVTracksideCore.wxs
        echo '    <WixVariable Id="WixUILicenseRtf" Value="license.rtf" />' >> FPVTracksideCore.wxs
        # Add icon if it exists
        if (Test-Path "build\windows-x64\icon.ico") {
          echo '    <Property Id="ARPPRODUCTICON" Value="icon.ico" />' >> FPVTracksideCore.wxs
          echo '    <Icon Id="icon.ico" SourceFile="build\windows-x64\icon.ico" />' >> FPVTracksideCore.wxs
        }
        echo '  </Product>' >> FPVTracksideCore.wxs
        echo '  <Fragment>' >> FPVTracksideCore.wxs
        echo '    <Directory Id="TARGETDIR" Name="SourceDir">' >> FPVTracksideCore.wxs
        echo '      <Directory Id="ProgramFilesFolder">' >> FPVTracksideCore.wxs
        echo '        <Directory Id="INSTALLFOLDER" Name="FPVTracksideCore" />' >> FPVTracksideCore.wxs
        echo '      </Directory>' >> FPVTracksideCore.wxs
        echo '      <Directory Id="ProgramMenuFolder">' >> FPVTracksideCore.wxs
        echo '        <Directory Id="ProgramMenuDir" Name="FPVTrackside" />' >> FPVTracksideCore.wxs
        echo '      </Directory>' >> FPVTracksideCore.wxs
        echo '      <Directory Id="DesktopFolder" Name="Desktop" />' >> FPVTracksideCore.wxs
        echo '    </Directory>' >> FPVTracksideCore.wxs
        echo '  </Fragment>' >> FPVTracksideCore.wxs
        echo '  <Fragment>' >> FPVTracksideCore.wxs
        echo '    <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">' >> FPVTracksideCore.wxs
        echo '      <Component Id="FPVTracksideCore.exe" Guid="*">' >> FPVTracksideCore.wxs
        echo '        <File Id="FPVTracksideCore.exe" Name="FPVTracksideCore.exe" Source="build\windows-x64\FPVTracksideCore.exe" KeyPath="yes" />' >> FPVTracksideCore.wxs
        echo '      </Component>' >> FPVTracksideCore.wxs
        # Add ALL files from build directory dynamically
        Get-ChildItem "build\windows-x64" -Recurse | Where-Object { !$_.PSIsContainer } | ForEach-Object {
          $relativePath = $_.FullName -replace [regex]::Escape((Get-Location).Path + "\build\windows-x64\"), ""
          $fileName = $_.Name
          
          # Create valid WiX ID by removing/replacing invalid characters
          $fileId = $fileName -replace '[^a-zA-Z0-9_]', '_'  # Replace invalid chars with underscore
          $fileId = $fileId -replace '^[0-9]', 'F$&'        # Prefix numbers with 'F'
          $fileId = $fileId -replace '^_', 'F'               # Replace leading underscore with 'F'
          $fileId = $fileId -replace '_+', '_'               # Replace multiple underscores with single
          $fileId = $fileId.Trim('_')                        # Remove leading/trailing underscores
          
          # Ensure ID starts with a letter
          if ($fileId -match '^[0-9]') {
            $fileId = "F$fileId"
          }
          
          $componentId = "Component_$fileId"
          
          # Skip the main executable as it's already included
          if ($fileName -ne "FPVTracksideCore.exe") {
            echo "      <Component Id=`"$componentId`" Guid=`"*`">" >> FPVTracksideCore.wxs
            echo "        <File Id=`"$fileId`" Name=`"$fileName`" Source=`"build\windows-x64\$relativePath`" KeyPath=`"yes`" />" >> FPVTracksideCore.wxs
            echo "      </Component>" >> FPVTracksideCore.wxs
          }
        }
        echo '    </ComponentGroup>' >> FPVTracksideCore.wxs
        echo '  </Fragment>' >> FPVTracksideCore.wxs
        echo '  <Fragment>' >> FPVTracksideCore.wxs
        echo '    <ComponentGroup Id="Shortcuts" Directory="INSTALLFOLDER">' >> FPVTracksideCore.wxs
        # Create shortcuts with conditional icon
        $iconAttribute = ""
        if (Test-Path "build\windows-x64\icon.ico") {
          $iconAttribute = ' Icon="icon.ico" IconIndex="0"'
        }
        
        echo '      <Component Id="StartMenuShortcut" Guid="{11111111-1111-1111-1111-111111111111}">' >> FPVTracksideCore.wxs
        echo "        <Shortcut Id=`"StartMenuShortcut`" Name=`"FPVTrackside`" Description=`"FPVTrackside Application`" Target=`"[INSTALLFOLDER]FPVTracksideCore.exe`" WorkingDirectory=`"INSTALLFOLDER`"$iconAttribute Directory=`"ProgramMenuDir`" />" >> FPVTracksideCore.wxs
        echo '        <RemoveFolder Id="ProgramMenuDir" On="uninstall" Directory="ProgramMenuDir" />' >> FPVTracksideCore.wxs
        echo '        <RegistryValue Root="HKCU" Key="Software\FPVTrackside" Name="installed" Type="integer" Value="1" KeyPath="yes" />' >> FPVTracksideCore.wxs
        echo '      </Component>' >> FPVTracksideCore.wxs
        echo '      <Component Id="DesktopShortcut" Guid="{22222222-2222-2222-2222-222222222222}">' >> FPVTracksideCore.wxs
        echo "        <Shortcut Id=`"DesktopShortcut`" Name=`"FPVTrackside`" Description=`"FPVTrackside Application`" Target=`"[INSTALLFOLDER]FPVTracksideCore.exe`" WorkingDirectory=`"INSTALLFOLDER`"$iconAttribute Directory=`"DesktopFolder`" />" >> FPVTracksideCore.wxs
        echo '        <RegistryValue Root="HKCU" Key="Software\FPVTrackside" Name="desktop_shortcut" Type="integer" Value="1" KeyPath="yes" />' >> FPVTracksideCore.wxs
        echo '      </Component>' >> FPVTracksideCore.wxs
        echo '    </ComponentGroup>' >> FPVTracksideCore.wxs
        echo '  </Fragment>' >> FPVTracksideCore.wxs
        echo '</Wix>' >> FPVTracksideCore.wxs
        
        # Create simple license file
        echo '{\rtf1\ansi\deff0 {\fonttbl {\f0 Times New Roman;}}' > license.rtf
        echo '\f0\fs24' >> license.rtf
        echo '' >> license.rtf
        echo 'FPV Trackside Core License Agreement' >> license.rtf
        echo '' >> license.rtf
        echo 'This software is provided as-is without any warranty. Use at your own risk.' >> license.rtf
        echo '' >> license.rtf
        echo 'Copyright (c) 2024 FPV Trackside' >> license.rtf
        
        echo "WiX source files created successfully"
    
    - name: Build MSI Installer
      run: |
        # Add WiX to PATH for this step
        $env:PATH += ";C:\Program Files (x86)\WiX Toolset v3.11\bin"
        
        # Compile WiX source to MSI
        if ("${{ needs.detect-version.outputs.is-release-branch }}" -eq "true") {
          $msiName = "FPV-Trackside-Core-Windows-v${{ needs.detect-version.outputs.windows-version }}.msi"
        } else {
          $msiName = "FPV-Trackside-Core-Windows-${{ github.ref_name }}-v${{ needs.detect-version.outputs.windows-version }}.msi"
        }
        
        # Build the MSI
        candle.exe -ext WixUIExtension FPVTracksideCore.wxs -out FPVTracksideCore.wixobj
        if ($LASTEXITCODE -ne 0) {
          Write-Error "WiX compilation failed"
          exit 1
        }
        
        light.exe -ext WixUIExtension FPVTracksideCore.wixobj -out $msiName
        if ($LASTEXITCODE -ne 0) {
          Write-Error "WiX linking failed"
          exit 1
        }
        
        # Verify MSI was created
        if (Test-Path $msiName) {
          Write-Host "MSI installer created successfully: $msiName"
          Get-ChildItem $msiName | Select-Object Name, Length
        } else {
          Write-Error "MSI installer was not created"
          exit 1
        }
    
    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4
      with:
        name: fpv-trackside-core-windows-${{ needs.detect-version.outputs.windows-version }}-${{ github.ref_name }}
        path: "FPV-Trackside-Core-Windows-*.msi"
        retention-days: 90

  create-release:
    if: (github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/'))) || (github.event_name == 'workflow_dispatch' && inputs.create_release)
    runs-on: ubuntu-latest
    needs: [detect-version, build-macos, build-windows]
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download macOS Artifact
      uses: actions/download-artifact@v4
      with:
        name: fpvtrackside-macos-${{ needs.detect-version.outputs.macos-version }}-${{ github.ref_name }}
    
    - name: Download Windows Artifact
      uses: actions/download-artifact@v4
      with:
        name: fpv-trackside-core-windows-${{ needs.detect-version.outputs.windows-version }}-${{ github.ref_name }}
    
    - name: Generate Release Notes
      id: release-notes
      run: |
        # Get the latest commit messages since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --no-merges)
        else
          COMMITS=$(git log --oneline --no-merges -10)
        fi
        
        # Generate release notes
        echo "## üöÄ FPVTrackside Release ${{ needs.detect-version.outputs.release-tag }}" > release_notes.md
        echo "" >> release_notes.md
        echo "### üì¶ Downloads" >> release_notes.md
        echo "- **macOS (Apple Silicon)**: FPVTrackside-macOS-v${{ needs.detect-version.outputs.macos-version }}.dmg" >> release_notes.md
        echo "- **Windows (x64)**: FPV-Trackside-Core-Windows-v${{ needs.detect-version.outputs.windows-version }}.msi" >> release_notes.md
        echo "" >> release_notes.md
        echo "### üì± Platform Versions" >> release_notes.md
        echo "- **macOS Version**: ${{ needs.detect-version.outputs.macos-version }}" >> release_notes.md
        echo "- **Windows Version**: ${{ needs.detect-version.outputs.windows-version }}" >> release_notes.md
        echo "" >> release_notes.md
        echo "### üîÑ Recent Changes" >> release_notes.md
        
        if [ -n "$COMMITS" ]; then
          echo "$COMMITS" | while read line; do
            echo "- $line" >> release_notes.md
          done
        else
          echo "- Initial release or no recent changes" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "### üíª System Requirements" >> release_notes.md
        echo "" >> release_notes.md
        echo "#### macOS" >> release_notes.md
        echo "- macOS 10.15 (Catalina) or later" >> release_notes.md
        echo "- Apple Silicon (M1/M2) or Intel processor" >> release_notes.md
        echo "- Screen recording permissions may be required for screen capture features" >> release_notes.md
        echo "" >> release_notes.md
        echo "#### Windows" >> release_notes.md
        echo "- Windows 10 x64 or later" >> release_notes.md
        echo "- .NET 6.0 runtime (included in self-contained build)" >> release_notes.md
        echo "" >> release_notes.md
        echo "### üìã Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "#### macOS" >> release_notes.md
        echo "1. Download the macOS DMG file" >> release_notes.md
        echo "2. Double-click the DMG to mount it" >> release_notes.md
        echo "3. Drag \"FPVTrackside.app\" to your Applications folder" >> release_notes.md
        echo "4. Eject the DMG when finished" >> release_notes.md
        echo "5. Right-click and select \"Open\" for first launch (Gatekeeper)" >> release_notes.md
        echo "6. Grant screen recording permissions if using screen capture" >> release_notes.md
        echo "" >> release_notes.md
        echo "#### Windows" >> release_notes.md
        echo "1. Download the Windows MSI installer" >> release_notes.md
        echo "2. Double-click the MSI file to run the installer" >> release_notes.md
        echo "3. Follow the installation wizard" >> release_notes.md
        echo "4. Launch FPVTrackside from the Start Menu or desktop shortcut" >> release_notes.md
        echo "5. Windows Defender may require approval for first launch" >> release_notes.md
        echo "" >> release_notes.md
        echo "---" >> release_notes.md
        echo "" >> release_notes.md
        echo "**Note**: Both versions include all necessary dependencies and FFmpeg binaries." >> release_notes.md
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.detect-version.outputs.release-tag }}
        name: "FPVTrackside ${{ needs.detect-version.outputs.release-tag }}"
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          FPVTrackside-macOS-v${{ needs.detect-version.outputs.macos-version }}.dmg
          FPV-Trackside-Core-Windows-v${{ needs.detect-version.outputs.windows-version }}.msi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}