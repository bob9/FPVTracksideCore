name: Build and Release

on:
  push:
    branches: [ '**' ]  # Run on all branches
    tags: [ 'v*' ]
  pull_request:
    branches: [ '**' ]  # Run on all branches
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: false
        default: false
        type: boolean
      target_branch:
        description: 'Target branch for release (default: current)'
        required: false
        default: ''
        type: string

env:
  DOTNET_VERSION: '6.0.x'

jobs:
  detect-version:
    runs-on: ubuntu-latest
    outputs:
      macos-version: ${{ steps.get-version.outputs.macos-version }}
      windows-version: ${{ steps.get-version.outputs.windows-version }}
      release-tag: ${{ steps.get-version.outputs.release-tag }}
      is-release-branch: ${{ steps.get-version.outputs.is-release-branch }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Extract version numbers
      id: get-version
      run: |
        # Extract macOS version from FPVMacsideCore.csproj
        MACOS_VERSION=$(grep -o '<Version>[^<]*</Version>' FPVMacSideCore/FPVMacsideCore.csproj | sed 's/<Version>\(.*\)<\/Version>/\1/')
        echo "macos-version=$MACOS_VERSION" >> $GITHUB_OUTPUT
        
        # Extract Windows version from FPVTracksideCore.csproj
        WINDOWS_VERSION=$(grep -o '<Version>[^<]*</Version>' FPVTracksideCore/FPVTracksideCore.csproj | sed 's/<Version>\(.*\)<\/Version>/\1/')
        echo "windows-version=$WINDOWS_VERSION" >> $GITHUB_OUTPUT
        
        # Check if this is a release branch (master, main, or release/*)
        if [[ "${{ github.ref_name }}" == "master" || "${{ github.ref_name }}" == "main" || "${{ github.ref_name }}" =~ ^release/ ]]; then
          IS_RELEASE_BRANCH="true"
        else
          IS_RELEASE_BRANCH="false"
        fi
        echo "is-release-branch=$IS_RELEASE_BRANCH" >> $GITHUB_OUTPUT
        
        # Use the higher version for release tag, or current timestamp if triggered manually
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          RELEASE_TAG="v$(date +'%Y.%m.%d-%H%M%S')"
        elif [[ "${{ github.ref_type }}" == "tag" ]]; then
          RELEASE_TAG="${{ github.ref_name }}"
        else
          # Use semantic versioning - pick the higher version
          if printf '%s\n%s\n' "$MACOS_VERSION" "$WINDOWS_VERSION" | sort -V | tail -n1 | grep -q "$WINDOWS_VERSION"; then
            RELEASE_TAG="v$WINDOWS_VERSION"
          else
            RELEASE_TAG="v$MACOS_VERSION"
          fi
        fi
        echo "release-tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
        
        echo "🍎 macOS Version: $MACOS_VERSION"
        echo "🪟 Windows Version: $WINDOWS_VERSION"
        echo "🏷️ Release Tag: $RELEASE_TAG"
        echo "📦 Is Release Branch: $IS_RELEASE_BRANCH"

  build-macos:
    runs-on: macos-latest
    needs: detect-version
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore "FPVMacside - Core.sln"
    
    - name: Build macOS Release
      run: |
        dotnet publish FPVMacSideCore/FPVMacsideCore.csproj \
          --configuration Release \
          --runtime osx-arm64 \
          --self-contained true \
          --output "./build/macos-arm64" \
          -p:PublishSingleFile=true \
          -p:PublishReadyToRun=false \
          -p:TieredCompilation=false
    
    - name: Create macOS App Bundle
      run: |
        mkdir -p "FPVTrackside.app/Contents/MacOS"
        mkdir -p "FPVTrackside.app/Contents/Resources"
        
        # Copy the executable
        cp "./build/macos-arm64/FPVMacsideCore" "FPVTrackside.app/Contents/MacOS/"
        
        # Copy additional resources
        if [ -d "./build/macos-arm64/ffmpeg" ]; then
          cp -r "./build/macos-arm64/ffmpeg" "FPVTrackside.app/Contents/MacOS/"
        fi
        if [ -d "./build/macos-arm64/bitmapfonts" ]; then
          cp -r "./build/macos-arm64/bitmapfonts" "FPVTrackside.app/Contents/MacOS/"
        fi
        
        # Copy app icon if it exists
        if [ -f "./build/macos-arm64/square.icns" ]; then
          cp "./build/macos-arm64/square.icns" "FPVTrackside.app/Contents/Resources/"
        elif [ -f "FPVMacSideCore/square.icns" ]; then
          cp "FPVMacSideCore/square.icns" "FPVTrackside.app/Contents/Resources/"
        elif [ -f "dist/FPVTrackside.app/Contents/Resources/square.icns" ]; then
          cp "dist/FPVTrackside.app/Contents/Resources/square.icns" "FPVTrackside.app/Contents/Resources/"
        fi
        
        # Create Info.plist
        cat > "FPVTrackside.app/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleDisplayName</key>
            <string>FPVTrackside</string>
            <key>CFBundleExecutable</key>
            <string>FPVMacsideCore</string>
            <key>CFBundleIconFile</key>
            <string>square.icns</string>
            <key>CFBundleIdentifier</key>
            <string>com.fpvtrackside</string>
            <key>CFBundleName</key>
            <string>FPVTrackside</string>
            <key>CFBundleShortVersionString</key>
            <string>${{ needs.detect-version.outputs.macos-version }}</string>
            <key>CFBundleVersion</key>
            <string>${{ needs.detect-version.outputs.macos-version }}</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.15</string>
        </dict>
        </plist>
        EOF
        
        # Make executable
        chmod +x "FPVTrackside.app/Contents/MacOS/FPVMacsideCore"
    
    - name: Create macOS DMG
      if: needs.detect-version.outputs.is-release-branch == 'true'
      run: |
        # Install create-dmg tool for professional DMG creation
        brew install create-dmg
        
        # Create a temporary directory for DMG contents
        mkdir -p dmg-temp
        cp -r "FPVTrackside.app" dmg-temp/
        
        # Create DMG with professional layout
        create-dmg \
          --volname "FPVTrackside v${{ needs.detect-version.outputs.macos-version }}" \
          --volicon "FPVTrackside.app/Contents/Resources/square.icns" \
          --window-pos 200 120 \
          --window-size 800 450 \
          --icon-size 100 \
          --icon "FPVTrackside.app" 200 190 \
          --hide-extension "FPVTrackside.app" \
          --app-drop-link 600 190 \
          --hdiutil-verbose \
          "FPVTrackside-macOS-v${{ needs.detect-version.outputs.macos-version }}.dmg" \
          dmg-temp/ || {
            # Fallback if create-dmg fails - use hdiutil directly
            echo "create-dmg failed, using hdiutil fallback..."
            hdiutil create -volname "FPVTrackside v${{ needs.detect-version.outputs.macos-version }}" \
              -srcfolder dmg-temp \
              -ov -format UDZO \
              "FPVTrackside-macOS-v${{ needs.detect-version.outputs.macos-version }}.dmg"
          }
        
        # Verify DMG was created
        ls -la *.dmg
        
        # Also create a ZIP backup for compatibility
        zip -r "FPVTrackside-macOS-v${{ needs.detect-version.outputs.macos-version }}.zip" "FPVTrackside.app"
    
    - name: Create macOS ZIP (all branches)
      if: needs.detect-version.outputs.is-release-branch == 'false'
      run: |
        # Create a simple ZIP for non-release branches
        zip -r "FPVTrackside-macOS-${{ github.ref_name }}-v${{ needs.detect-version.outputs.macos-version }}.zip" "FPVTrackside.app"
    
    - name: Upload macOS Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: fpvtrackside-macos-${{ needs.detect-version.outputs.macos-version }}-${{ github.ref_name }}
        path: |
          FPVTrackside-macOS-*.zip
          FPVTrackside-macOS-*.dmg
        retention-days: 90

  build-windows:
    runs-on: windows-latest
    needs: detect-version
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore FPVTracksideCore/FPVTracksideCore.sln
    
    - name: Build Windows Release
      run: |
        dotnet publish FPVTracksideCore/FPVTracksideCore.csproj `
          --configuration Release `
          --runtime win-x64 `
          --self-contained true `
          --output "./build/windows-x64" `
          -p:PublishSingleFile=true `
          -p:PublishReadyToRun=false `
          -p:TieredCompilation=false
    
    - name: Create Windows Archive
      run: |
        # Create ZIP archive for Windows
        if ("${{ needs.detect-version.outputs.is-release-branch }}" -eq "true") {
          Compress-Archive -Path "./build/windows-x64/*" -DestinationPath "FPV-Trackside-Core-Windows-v${{ needs.detect-version.outputs.windows-version }}.zip"
        } else {
          Compress-Archive -Path "./build/windows-x64/*" -DestinationPath "FPV-Trackside-Core-Windows-${{ github.ref_name }}-v${{ needs.detect-version.outputs.windows-version }}.zip"
        }
    
    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4
      with:
        name: fpv-trackside-core-windows-${{ needs.detect-version.outputs.windows-version }}-${{ github.ref_name }}
        path: "FPV-Trackside-Core-Windows-*.zip"
        retention-days: 90

  create-release:
    if: (github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/'))) || (github.event_name == 'workflow_dispatch' && inputs.create_release)
    runs-on: ubuntu-latest
    needs: [detect-version, build-macos, build-windows]
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download macOS Artifact
      uses: actions/download-artifact@v4
      with:
        name: fpvtrackside-macos-${{ needs.detect-version.outputs.macos-version }}-${{ github.ref_name }}
    
    - name: Download Windows Artifact
      uses: actions/download-artifact@v4
      with:
        name: fpv-trackside-core-windows-${{ needs.detect-version.outputs.windows-version }}-${{ github.ref_name }}
    
    - name: Generate Release Notes
      id: release-notes
      run: |
        # Get the latest commit messages since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --no-merges)
        else
          COMMITS=$(git log --oneline --no-merges -10)
        fi
        
        # Generate release notes
        cat > release_notes.md << EOF
        ## 🚀 FPV Trackside Core Release ${{ needs.detect-version.outputs.release-tag }}
        
        ### 📦 Downloads
        - **macOS (Apple Silicon)**: 
          - **DMG Installer**: FPVTrackside-macOS-v${{ needs.detect-version.outputs.macos-version }}.dmg (Recommended)
          - **ZIP Archive**: FPVTrackside-macOS-v${{ needs.detect-version.outputs.macos-version }}.zip
        - **Windows (x64)**: FPV-Trackside-Core-Windows-v${{ needs.detect-version.outputs.windows-version }}.zip
        
        ### 📱 Platform Versions
        - **macOS Version**: ${{ needs.detect-version.outputs.macos-version }}
        - **Windows Version**: ${{ needs.detect-version.outputs.windows-version }}
        
        ### 🔄 Recent Changes
        EOF
        
        if [ -n "$COMMITS" ]; then
          echo "$COMMITS" | while read line; do
            echo "- $line" >> release_notes.md
          done
        else
          echo "- Initial release or no recent changes" >> release_notes.md
        fi
        
        cat >> release_notes.md << EOF
        
        ### 💻 System Requirements
        
        #### macOS
        - macOS 10.15 (Catalina) or later
        - Apple Silicon (M1/M2) or Intel processor
        - Screen recording permissions may be required for screen capture features
        
        #### Windows
        - Windows 10 x64 or later
        - .NET 6.0 runtime (included in self-contained build)
        
        ### 📋 Installation
        
        #### macOS
        **Option 1 - DMG Installer (Recommended):**
        1. Download the macOS DMG file
        2. Double-click the DMG to mount it
        3. Drag "FPVTrackside.app" to your Applications folder
        4. Eject the DMG when finished
        5. Right-click and select "Open" for first launch (Gatekeeper)
        6. Grant screen recording permissions if using screen capture
        
        **Option 2 - ZIP Archive:**
        1. Download the macOS ZIP file
        2. Extract the ZIP archive
        3. Move "FPVTrackside.app" to your Applications folder
        4. Right-click and select "Open" for first launch (Gatekeeper)
        5. Grant screen recording permissions if using screen capture
        
        #### Windows
        1. Download the Windows ZIP file
        2. Extract to your desired location
        3. Run FPVTracksideCore.exe
        4. Windows Defender may require approval for first launch
        
        ---
        
        **Note**: Both versions include all necessary dependencies and FFmpeg binaries.
        EOF
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.detect-version.outputs.release-tag }}
        name: "FPV Trackside Core ${{ needs.detect-version.outputs.release-tag }}"
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          FPVTrackside-macOS-v${{ needs.detect-version.outputs.macos-version }}.dmg
          FPVTrackside-macOS-v${{ needs.detect-version.outputs.macos-version }}.zip
          FPV-Trackside-Core-Windows-v${{ needs.detect-version.outputs.windows-version }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}